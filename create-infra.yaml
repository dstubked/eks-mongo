AWSTemplateFormatVersion: '2010-09-09'
Description: Hosted EKS 1.31 and MongoDB Deployment with Authentication with an S3 Bucket

Parameters:
  KeyName:
    Description: EC2 Key Pair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
  PublicSubnetId:
    Description: Public subnet ID for MongoDB
    Type: AWS::EC2::Subnet::Id
  PrivateSubnetIds:
    Description: Comma-separated list of private subnet IDs for EKS (at least two)
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC ID for the EKS Security Group
    Type: AWS::EC2::VPC::Id
  MongoDBUsername:
    Description: Username for MongoDB authentication
    Type: String
  MongoDBPassword:
    Description: Password for MongoDB authentication
    Type: String
    NoEcho: true

Resources:
  MongoDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}/mongodb-credentials"
      SecretString: !Sub |
        {
          "username": "${MongoDBUsername}",
          "password": "${MongoDBPassword}"
        }

  MongoDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow MongoDB access from EKS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref EKSSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  MongoDBInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0acc1257c3b917214
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: [!Ref MongoDBSecurityGroup]
          SubnetId: !Ref PublicSubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda # Primary volume.
          Ebs:
            VolumeSize: 30 # Minimum storage size set to 30GB.
            VolumeType: gp2 # General Purpose SSD.
      IamInstanceProfile: !Ref MongoDBInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get install -y gnupg curl
          curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org=6.0.3 mongodb-org-database=6.0.3 mongodb-org-server=6.0.3 mongodb-org-mongos=6.0.3 mongodb-org-tools=6.0.3
          sudo curl -o /etc/mongod.conf http://ec2-13-251-38-45.ap-southeast-1.compute.amazonaws.com/demo-group/dbapp/-/raw/main/mongod.conf
          sudo systemctl restart mongod
          sudo sleep 10
          sudo mongosh admin --eval 'db.createUser({user: "${MongoDBUsername}", pwd: "${MongoDBPassword}", roles: [{role: "root", db: "admin"}]})'
          sudo systemctl restart mongod
          sudo apt-get install -y awscli
          sudo curl -o /home/ubuntu/mongo-backup.sh http://ec2-13-251-38-45.ap-southeast-1.compute.amazonaws.com/demo-group/dbapp/-/raw/main/mongo-backup.sh
          sudo sh -c '(crontab -l 2>/dev/null; echo "0 2 * * * /home/ubuntu/mongo-backup.sh") | crontab -'

  MongoDBInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MongoDBInstanceRole

  MongoDBInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: zh-eks-demo-env
      Version: '1.31'
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref PrivateSubnetIds

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeInstanceRole.Arn
      ScalingConfig:
        MinSize: 2
        DesiredSize: 2
        MaxSize: 2
      InstanceTypes: 
        - t2.medium
      Subnets: !Ref PrivateSubnetIds

  EKSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster nodes to communicate with MongoDB instance.
      VpcId: !Ref VpcId

  # New S3 Bucket with public read access
  PublicS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-public-mongodb-backups"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  PublicS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource: 
              - !Sub "arn:aws:s3:::${PublicS3Bucket}"
              - !Sub "arn:aws:s3:::${PublicS3Bucket}/*"

Outputs:
  MongoDBConnectionString:
    Value: !Sub "mongodb://${MongoDBUsername}:${MongoDBPassword}@${MongoDBInstance.PrivateIp}:27017/admin"
  EKSClusterName:
    Value: !Ref EKSCluster
  PublicS3BucketName:
    Description: Name of the public S3 bucket for MongoDB backups
    Value: !Ref PublicS3Bucket
  PublicS3BucketURL:
    Description: URL of the public S3 bucket for MongoDB backups
    Value: !GetAtt PublicS3Bucket.WebsiteURL