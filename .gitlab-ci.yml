stages:
  - trivy-scan
  - permissions-scan
  - validate-cf
  - deploy-cf
  - get-kubeconfig
  - store-secret

variables:
  AWS_DEFAULT_REGION: "ap-southeast-1"
  STACK_NAME: "eks-db-stack"
  TEMPLATE_FILE: "create-infra.yaml"
  KEY_NAME: "zh-aws-12Sep2021"
  PUBLIC_SUBNET_ID: "subnet-2010b868"
  PRIVATE_SUBNET_IDS: "subnet-086a3dc81dd7e1b5f,subnet-06faa8a06dcfc9476" # Replace with your second private subnet ID
  VPC_ID: "vpc-a932e5cf"

scan:
  stage: trivy-scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy config --exit-code 0 --severity HIGH,CRITICAL .

permissions-scan:
  stage: permissions-scan
  image:
    name: ruby:latest
    entrypoint: [""]
  script:
    # Install CFN-Nag
    - gem install cfn-nag
    # Run CFN-Nag scan and output results to job logs
    - echo "Scanning CloudFormation template for security issues..."
    - cfn_nag_scan --input-path $TEMPLATE_FILE | tee cfn-nag-results.txt || echo "CFN-Nag scan completed with warnings/errors."
    # Print results to job logs for visibility
    - cat cfn-nag-results.txt
    
validate:
  stage: validate-cf
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - aws cloudformation validate-template --template-body file://$TEMPLATE_FILE

deploy:
  stage: deploy-cf
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - |
      aws cloudformation deploy \
        --stack-name $STACK_NAME \
        --template-file $TEMPLATE_FILE \
        --capabilities CAPABILITY_IAM \
        --parameter-overrides \
          KeyName=$KEY_NAME \
          PublicSubnetId=$PUBLIC_SUBNET_ID \
          PrivateSubnetIds=$PRIVATE_SUBNET_IDS \
          VpcId=$VPC_ID \
          MongoDBSecretARN=$MONGODB_SECRET_ARN
    - |
      echo "Deployment complete. Outputs:"
      aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --query "Stacks[0].Outputs" \
        --output table

get-kubeconfig:
  stage: get-kubeconfig
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - |
      CLUSTER_NAME=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --query "Stacks[0].Outputs[?OutputKey=='EKSClusterName'].OutputValue" \
        --output text)
      aws eks update-kubeconfig --name $CLUSTER_NAME --kubeconfig kubeconfig
  artifacts:
    paths:
      - kubeconfig

store-secret:
  stage: store-secret
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - |
      # Get the secret ARN from CloudFormation outputs
      SECRET_ARN=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --query "Stacks[0].Outputs[?OutputKey=='KubeconfigSecretArn'].OutputValue" \
        --output text)

      # Store kubeconfig in Secrets Manager
      aws secretsmanager put-secret-value \
        --secret-id $SECRET_ARN \
        --secret-string file://kubeconfig
  needs: ["get-kubeconfig"]
  artifacts:
    paths:
      - kubeconfig